// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using VDS.RDF.Linq;
using VDS.RDF.Linq.Sparql;
using NUnit.Framework;
using RdfMusic;
using VDS.RDF;
using VDS.RDF.Parsing;
using UnitTests.Properties;
using Rhino.Mocks;
using UnitTests.TaskEntityModel; 

namespace UnitTests
{
	/// <summary>
	///This is ontology test class for VDS.RDF.Linq.QueryFactory&lt;T&gt; and is intended
	///to contain all VDS.RDF.Linq.QueryFactory&lt;T&gt; Unit Tests
	///</summary>
	[TestFixture]
	public class QueryFactoryTest
	{
		#region helpers

		private static IInMemoryQueryableStore CreateMemoryStore()
		{
			TripleStore result = new TripleStore();
			string serialisedLocation = Settings.Default.testStoreLocation;
            Graph g = new Graph();
            FileLoader.Load(g, serialisedLocation);
            result.Add(g);
			return result;
		}

		private static LinqTripleStore CreateLinqTripleStore()
		{
            return new LinqTripleStore(CreateMemoryStore());
		}

		private static LinqTripleStore CreateInMemorySparqlTripleStore()
		{
            return new LinqTripleStore(CreateMemoryStore());
		}

		private static LinqTripleStore CreateOnlineSparqlTripleStore()
		{
			return new LinqTripleStore(@"http://localhost/linqtordf/SparqlQuery.asp");
		}

		#endregion

		#region CreateConnection

		/// <summary>
		///A test for CreateConnection (IRdfQuery&lt;T&gt;)
		///</summary>
		[Test]
		public void CreateConnectionTest_InMemorySparqlTripleStore()
		{
			TestConnectionCreationForTripleStore(CreateInMemorySparqlTripleStore());
		}

		/// <summary>
		///A test for CreateConnection (IRdfQuery&lt;T&gt;)
		///</summary>
		[Test]
		public void CreateConnectionTest_OnlineSparqlTripleStore()
		{
			TestConnectionCreationForTripleStore(CreateOnlineSparqlTripleStore());
		}

		private static void TestConnectionCreationForTripleStore(LinqTripleStore ts1)
		{
			IRdfContext context = new RdfDataContext(ts1);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts1.QueryMethod, context);
			IRdfQuery<Track> qry1 = context.ForType<Track>();
			IRdfConnection<Track> rdfConnection = factory.CreateConnection(qry1);
			Assert.IsNotNull(rdfConnection);
		}

		#endregion

		#region CreateExpressionTranslator

		/// <summary>
		///A test for CreateExpressionTranslator ()
		///</summary>
		[Test]
		public void CreateExpressionTranslatorTest()
		{
			LinqTripleStore ts = CreateOnlineSparqlTripleStore();
			IRdfContext context = new RdfDataContext(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryMethod, context);
			Assert.AreEqual(factory.QueryType, ts.QueryMethod);
			IQueryFormatTranslator translator = factory.CreateExpressionTranslator();
			Assert.IsNotNull(translator);
            Assert.IsTrue(translator is LinqToSparqlExpTranslator<Track>);
		}

		/// <summary>
		///A test for CreateExpressionTranslator ()
		///</summary>
		[Test]
		public void CreateExpressionTranslatorTest2()
		{
			LinqTripleStore ts = CreateLinqTripleStore();
			IRdfContext context = new RdfDataContext(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryMethod, context);
			Assert.AreEqual(factory.QueryType, ts.QueryMethod);
			IQueryFormatTranslator translator = factory.CreateExpressionTranslator();
			Assert.IsNotNull(translator);
			Assert.IsTrue(translator is LinqToSparqlExpTranslator<Track>);
		}

		#endregion

		#region CreateQuery

		/// <summary>
		///A test for CreateQuery&lt;&gt; ()
		///</summary>
		[Test]
		public void CreateQueryTest_OnlineSparqlTripleStore()
		{
			LinqTripleStore ts = CreateOnlineSparqlTripleStore();
			IRdfContext context = new RdfDataContext(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryMethod, context);
			Assert.AreEqual(factory.QueryType, ts.QueryMethod);
			IRdfQuery<Track> query = factory.CreateQuery<Track>();
			Assert.IsNotNull(query);
            Assert.IsTrue(query is LinqToSparqlQuery<Track>);
		}

		/// <summary>
		///A test for CreateQuery&lt;&gt; ()
		///</summary>
		[Test]
		public void CreateQueryTest_InMemorySparqlTripleStore()
		{
			LinqTripleStore ts = CreateInMemorySparqlTripleStore();
			IRdfContext context = new RdfDataContext(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryMethod, context);
			Assert.AreEqual(factory.QueryType, ts.QueryMethod);
			IRdfQuery<Track> query = factory.CreateQuery<Track>();
			Assert.IsNotNull(query);
            Assert.IsTrue(query is LinqToSparqlQuery<Track>);
        }

		/// <summary>
		///A test for CreateQuery&lt;&gt; ()
		///</summary>
		[Test]
		public void CreateQueryTest_InMemoryTripleStore()
		{
			LinqTripleStore ts = CreateLinqTripleStore();
			IRdfContext context = new RdfDataContext(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryMethod, context);
			Assert.AreEqual(factory.QueryType, ts.QueryMethod);
			IRdfQuery<Track> query = factory.CreateQuery<Track>();
			Assert.IsNotNull(query);
            Assert.IsTrue(query is LinqToSparqlQuery<Track>);
        }

		#endregion
		protected MockRepository mocks;
		/// <summary>
		///A test for QueryFactory (QueryType, IRdfContext)
		///</summary>
		[Test]
		public void ConstructorTest()
		{
			mocks = new MockRepository();
			LinqTripleStore ts = mocks.CreateMock<LinqTripleStore>("http://www.tempuri.com");
			IRdfContext context = mocks.CreateMock<RdfDataContext>(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryMethod, context);
			Assert.IsNotNull(factory); 
		}

		/// <summary>
		///A test for QueryType
		///</summary>
        [Test]
		public void QueryTypeTest()
		{
			mocks = new MockRepository();
			LinqQueryMethod queryType = LinqQueryMethod.RemoteSparql; 
			LinqTripleStore ts = new LinqTripleStore("http://www.tempuri.com");
			IRdfContext context = mocks.CreateMock<RdfDataContext>(ts);
			QueryFactory<Task> target = new QueryFactory<Task>(queryType, context);
			LinqQueryMethod val = LinqQueryMethod.RemoteSparql;
			Assert.AreEqual(val, target.QueryType, "VDS.RDF.Linq.QueryFactory<T>.QueryType was not set correctly.");
//			Assert.Fail("Generics testing must be manually provided.");
		}
	}
}
